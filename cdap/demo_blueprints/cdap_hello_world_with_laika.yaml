tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - {{ ONAPTEMPLATE_RAWREPOURL_org_onap_dcaegen2 }}/type_files/cdap/14.2.5/cdap_types.yaml
  - {{ ONAPTEMPLATE_RAWREPOURL_org_onap_dcaegen2 }}/type_files/docker/2.3.0/node-type.yaml
  - {{ ONAPTEMPLATE_RAWREPOURL_org_onap_dcaegen2 }}/type_files/relationship/1.0.0/node-type.yaml

inputs:
  hello_world_jar_url:
    type: string
  laika_image:
    type: string
  connected_broker_dns_name:
    type: string
    default : "cdap_broker"
 
node_templates:

  hw_cdap_app:
    type: dcae.nodes.MicroService.cdap
    properties:
      service_component_type:
        'hello_world'
      jar_url: { get_input : hello_world_jar_url }
      artifact_name: "HelloWorld"
      artifact_version: "3.4.3"
      namespace: "cloudifyhwtest"
      programs:
        [{"program_type" : "flows", "program_id" : "WhoFlow"}, {"program_type" : "services", "program_id" : "Greeting"}]
      streamname:
        'who'
      service_endpoints:
        [{"service_name" : "Greeting", "service_endpoint" : "greet", "endpoint_method" : "GET"}]
      
      connections:
        services_calls:
          - service_component_type: laika
            config_key: "laika_handle"

    relationships:
      - type: dcae.relationships.component_connected_to
        target: laika-one

    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            connected_broker_dns_name: { get_input: connected_broker_dns_name }

  laika-one:
    type: dcae.nodes.DockerContainerForComponents
    properties:
        service_component_type: 'laika'
        service_id: 'this_is_dumb'
        location_id: 'this_is_dumb'
        image: { get_input : laika_image }
        # Trying without health check
    relationships:
      - type: dcae.relationships.component_contained_in
        target: docker_host
    interfaces:
      cloudify.interfaces.lifecycle:
        stop:
          inputs:
            cleanup_image:
              False

  docker_host:
    type: dcae.nodes.SelectedDockerHost
    properties:
      location_id: 'this is dumb'
      docker_host_override: 'platform_dockerhost'
   
outputs: 
  hw_cdap_app_name:
    value: {get_attribute:[hw_cdap_app, service_component_name]}
  


