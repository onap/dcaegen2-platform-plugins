# ================================================================================
# Copyright (c) 2017-2018 AT&T Intellectual Property. All rights reserved.
# ================================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============LICENSE_END=========================================================
#
# ECOMP is a trademark and service mark of AT&T Intellectual Property.
tosca_definitions_version: cloudify_dsl_1_3

description: >
  This Blueprint installs a chain of two laika instances on a Docker cluster

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - {{ ONAPTEMPLATE_RAWREPOURL_org_onap_dcaegen2 }}/type_files/docker/2.2.0/node-type.yaml
  - {{ ONAPTEMPLATE_RAWREPOURL_org_onap_dcaegen2 }}/type_files/relationship/1.0.0/node-type.yaml
  - {{ ONAPTEMPLATE_RAWREPOURL_org_onap_dcaegen2 }}/type_files/dmaap/1.1.0/dmaap.yaml

inputs:

  service_id:
    description: Unique id used for an instance of this DCAE service. Use deployment id
    default: 'foobar'

  topic00_aaf_username:
  topic00_aaf_password:
  topic00_location:
    default: mtc5
  topic00_client_role:

  topic01_aaf_username:
  topic01_aaf_password:
  topic01_location:
    default: mtc5
  topic01_client_role:

  feed00_location:
    default: mtc5

  feed01_location:
    default: mtc5

  topic00fqtn:
    type: string
  topic01fqtn:
    type: string
  laika_image:
    type: string

node_templates:

  topic00:
    type: dcae.nodes.ExistingTopic
    properties:
      fqtn: { get_input : topic00fqtn }
  
  topic01:
    type: dcae.nodes.ExistingTopic
    properties:
      fqtn: { get_input : topic01fqtn }

  feed00:
     type: dcae.nodes.Feed
     properties:
        # NOTE: Had to manually make unique feed names per test because I've been told there's
        # an issue with feeds not being deleted by uninstall.
        feed_name: "feed00-pub-laika"
        feed_description: "Feed00 to test pub for laika"
        feed_version: 1.0.0
        aspr_classification: "unclassified"

  feed01:
     type: dcae.nodes.Feed
     properties: 
        feed_name: "feed01-sub-laika"
        feed_description: "Feed01 to test sub for laika"
        feed_version: 1.0.0
        aspr_classification: "unclassified"

  laika-one:
    type: dcae.nodes.DockerContainerForComponentsUsingDmaap
    properties:
        service_component_type:
            'laika'
        service_id:
            { get_input: service_id }
        location_id:
            'rework-central'
        application_config:
            some-param: "Lorem ipsum dolor sit amet"
            streams_publishes:
              my-publishing-topic:
                aaf_username: { get_input: topic00_aaf_username }
                aaf_password: { get_input: topic00_aaf_password }
                type: "message_router"
                dmaap_info: "<< topic00 >>"
              my-publishing-feed:
                type: "data_router"
                dmaap_info: "<< feed00 >>"
            streams_subscribes:
              my-subscribing-topic:
                aaf_username: { get_input: topic01_aaf_username }
                aaf_password: { get_input: topic01_aaf_password }
                type: "message_router"
                dmaap_info: "<< topic01 >>"
              my-subscribing-feed:
                type: "data_router"
                dmaap_info: "<< feed01 >>"
            services_calls: {}
        image: { get_input : laika_image }
        docker_config:
            healthcheck:
                type: "http"
                endpoint: "/health"
        streams_publishes:
            - name: topic00
              location: { get_input: topic00_location }
              client_role: { get_input: topic00_client_role }
              type: message_router
            - name: feed00
              location: { get_input: feed00_location }
              type: data_router
        streams_subscribes:
            - name: topic01
              location: { get_input: topic01_location }
              client_role: { get_input: topic01_client_role }
              type: message_router
            - name: feed01
              location: { get_input: feed01_location }
              type: data_router
              route: identity
              scheme: https
    relationships:
      - type: dcae.relationships.component_contained_in
        target: docker_host
      - type: dcae.relationships.publish_events
        target: topic00
      - type: dcae.relationships.subscribe_to_events
        target: topic01
      - type: dcae.relationships.publish_files
        target: feed00
      - type: dcae.relationships.subscribe_to_files
        target: feed01
    interfaces:
      cloudify.interfaces.lifecycle:
        stop:
          inputs:
            cleanup_image:
              False

  docker_host:
    type: dcae.nodes.SelectedDockerHost
    properties:
        location_id:
            'rework-central'
        docker_host_override:
            'component_dockerhost'
