# ================================================================================
# Copyright (c) 2017-2018 AT&T Intellectual Property. All rights reserved.
# ================================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============LICENSE_END=========================================================
#
# ECOMP is a trademark and service mark of AT&T Intellectual Property.
tosca_definitions_version: cloudify_dsl_1_3

description: >
  This Blueprint installs a chain of two laika instances on a Docker cluster

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - {{ ONAPTEMPLATE_RAWREPOURL_org_onap_dcaegen2 }}/type_files/docker/2.3.0/node-type.yaml
  - {{ ONAPTEMPLATE_RAWREPOURL_org_onap_dcaegen2 }}/type_files/relationship/1.0.0/node-type.yaml
  - {{ ONAPTEMPLATE_RAWREPOURL_org_onap_dcaegen2 }}/type_files/dcaepolicy/1.0.0/node-type.yaml

inputs:
  laika_image:
    type: string

  host_capacity_policy_id:
    type: string
    default: DCAE_alex.Config_host_capacity_policy_id_value

  host_location_policy_id:
    type: string
    default: DCAE_alex.Config_host_location_policy_id_value

  db_server_policy_id:
    type: string
    default: DCAE_alex.Config_db_server_policy_id_value

node_templates:

  host_capacity_policy:
    type: dcae.nodes.policy
    properties:
        policy_id: { get_input: host_capacity_policy_id }
        # Use this property to toggle whether policy is required meaning errors are considered
        # critical otherwise errors are silenced.
        policy_required: true

  host_location_policy:
    type: dcae.nodes.policy
    properties:
        policy_id: { get_input: host_location_policy_id }
        policy_required: true

  db_server_policy:
    type: dcae.nodes.policy
    properties:
        policy_id: { get_input: db_server_policy_id }

  laika-zero:
    type: dcae.nodes.DockerContainerForComponents
    properties:
        service_component_type:
            'laika'
        location_id:
            'rework-central'
        service_id:
            'foo-service'
        application_config:
            some-param: "Lorem ipsum dolor sit amet"
            downstream-laika: "{{ laika }}"
        image: { get_input : laika_image }
        docker_config:
            healthcheck:
                type: "http"
                endpoint: "/health"
            policy:
                trigger_type: "docker"
                script_path: "/bin/echo"
    relationships:
      # Link to downstream laika
      - type: dcae.relationships.component_connected_to
        target: laika-one
      - type: dcae.relationships.component_contained_in
        target: docker_host
      - type: cloudify.relationships.depends_on
        target: host_capacity_policy
      - type: cloudify.relationships.depends_on
        target: host_location_policy
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            ports:
              - "8080:5432"
            envs:
              SOME-ENV: "BAM"
            max_wait:
              120
        stop:
          inputs:
            cleanup_image:
              False

  laika-one:
    type: dcae.nodes.DockerContainerForComponents
    properties:
        service_component_type:
            'laika'
        application_config:
            some-param: "Lorem ipsum dolor sit amet"
        image: { get_input : laika_image }
        # Trying without health check
    relationships:
      - type: dcae.relationships.component_contained_in
        target: docker_host
      - type: cloudify.relationships.depends_on
        target: db_server_policy
    interfaces:
      cloudify.interfaces.lifecycle:
        stop:
          inputs:
            cleanup_image:
              False

  docker_host:
    type: dcae.nodes.SelectedDockerHost
    properties:
        location_id:
            'rework-central'
        docker_host_override:
            'component_dockerhost'
