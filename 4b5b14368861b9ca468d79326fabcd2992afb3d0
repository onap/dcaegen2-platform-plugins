{
  "comments": [
    {
      "key": {
        "uuid": "49f00882_fb061399",
        "filename": "k8s/README.md",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 511
      },
      "writtenOn": "2020-12-15T15:30:09Z",
      "side": 1,
      "message": "What is the reason for using this \"concat\" syntax instead of the \u003ccontainer_port\u003e:\u003chost_port\u003e used for IPv4?  With this syntax, how do I specify a protocol(UDP or TCP)?",
      "revId": "4b5b14368861b9ca468d79326fabcd2992afb3d0",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5603b96_a0207bc8",
        "filename": "k8s/README.md",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 6729
      },
      "writtenOn": "2020-12-16T07:57:28Z",
      "side": 1,
      "message": "We are using concat here to use similar syntax that are used in onap blueprints, for example, in ves blueprint we have:\nports:\n              - concat: [{get_input: internal_port},\":\",{get_input: external_port}]\n              - concat: [{get_input: internal_port_tls},\":\",{get_input: external_port_tls}]\n\nWe can specify a protocol, the same way as previously: \n    - concat: [\u00278000/udp:31000\u0027]\n      ipv6: true",
      "parentUuid": "49f00882_fb061399",
      "revId": "4b5b14368861b9ca468d79326fabcd2992afb3d0",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "13873e90_45d82d64",
        "filename": "k8s/README.md",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 511
      },
      "writtenOn": "2020-12-18T15:26:07Z",
      "side": 1,
      "message": "These are two very different cases.  \n\nIn the ves blueprint example, you are using \"concat\" to invoke the intrinsic function called \"concat\".  When Cloudify Manager processes the blueprint, it will invoke the \"concat\" function to create a simple string.  (It will also invoke the \"get_input\" intrinsic function twice.\"  The k8splugin will see a simple string.\n\nIn the second case, you are using \"concat\" as a property name in a YAML object (which will be turned into a Python dict, with \"concat\" as a key).  You do not want the intrinsic function to be invoked.  You want the plugin to see a Python dict with a key called \"concat\" and another key called \"ipv6\".   (See line 261 in k8sclient/k8sclient.py, where the code is looking for a key called \"concat\".)  I am not sure how you are preventing the intrinsic function from being invoked, but if it is invoked, you will not get the result you expect.\n\nI would have given the property a meaningful name, like \"port_mapping\", instead of \"concat\".  Then it would be clearer to the blueprint writer what this property means, and there would be no risk of confusion with the intrinsic function called \"concat\".",
      "parentUuid": "d5603b96_a0207bc8",
      "revId": "4b5b14368861b9ca468d79326fabcd2992afb3d0",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69caca46_76aa8ad4",
        "filename": "k8s/README.md",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 5597
      },
      "writtenOn": "2020-12-22T11:52:03Z",
      "side": 1,
      "message": "All right, I actually thought, that concat there is used as  YAML key rather than a function.\nNow, what we wanted to avoid is to introduce some backwards compatibility issues.\n\nIf we`d change the concat --\u003e port_mapping, then we`d probably have to update the blueprints to use that new property, which would break backwards compatibility...\n\n...unless, we`d be fine to use concat as an intrinsic function, if the \"ipv6\" property is not used, and if we`d intend to use that one, we`d use as well port_mapping instead of \"concat\".\n\nAnyway, this might be tricky to explain to people interested in using that IPv6 approach.\nLooking at the backwards compatibility issue, what would You recommend:\n- we keep using \"concat\" as the YAML key (as we do today)\n- we change \"concat\" to \"port_mapping\" and we use \"port_mapping\" everywhere, in a plugin version 4.0.0 (this would be a breaking change from my perspective)\n- when we use no ipv6 property, we keep using concat, and if we`d intend to use IPv6, we move to use \"port_mapping\"\n\nIn this backwards compatibility context, the current behavior doesn`t look that bad to me...",
      "parentUuid": "13873e90_45d82d64",
      "revId": "4b5b14368861b9ca468d79326fabcd2992afb3d0",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3994fc16_3af25a18",
        "filename": "k8s/README.md",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 511
      },
      "writtenOn": "2021-01-11T18:51:21Z",
      "side": 1,
      "message": "For the IPv6 support, I think it would be wise to change \"concat\" to \"port_mapping\" for components using IPv6.\nWe would not need to make the change for any of the existing blueprints that use IPv4.  \nThe problem here is that \"concat\" is the name of an intrinsic function that provides string concatenation.  The blueprints that are currently using it are using it for string concatenation.\nIn a production environment, I think you will probably want to use inputs and string concatenation for IPv6, so that you can change the port mapping at deployment time.  For example:\n\nports:\n  - port_mapping: concat [{get_input: internal_port},\":\",{get_input: external_port}]\n    ipv6: {get_input: use_ipv6}",
      "parentUuid": "69caca46_76aa8ad4",
      "revId": "4b5b14368861b9ca468d79326fabcd2992afb3d0",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    }
  ]
}